{
    "name": "Trade",
    "module": "backtrader.trade",
    "doc": "Keeps track of the life of an trade: size, price,\ncommission (and value?)\n\nAn trade starts at 0 can be increased and reduced and can\nbe considered closed if it goes back to 0.\n\nThe trade can be long (positive size) or short (negative size)\n\nAn trade is not meant to be reversed (no support in the logic for it)\n\nMember Attributes:\n\n  - ``ref``: unique trade identifier\n  - ``status`` (``int``): one of Created, Open, Closed\n  - ``tradeid``: grouping tradeid passed to orders during creation\n    The default in orders is 0\n  - ``size`` (``int``): current size of the trade\n  - ``price`` (``float``): current price of the trade\n  - ``value`` (``float``): current value of the trade\n  - ``commission`` (``float``): current accumulated commission\n  - ``pnl`` (``float``): current profit and loss of the trade (gross pnl)\n  - ``pnlcomm`` (``float``): current profit and loss of the trade minus\n    commission (net pnl)\n  - ``isclosed`` (``bool``): records if the last update closed (set size to\n    null the trade\n  - ``isopen`` (``bool``): records if any update has opened the trade\n  - ``justopened`` (``bool``): if the trade was just opened\n  - ``baropen`` (``int``): bar in which this trade was opened\n\n  - ``dtopen`` (``float``): float coded datetime in which the trade was\n    opened\n\n    - Use method ``open_datetime`` to get a Python datetime.datetime\n      or use the platform provided ``num2date`` method\n\n  - ``barclose`` (``int``): bar in which this trade was closed\n\n  - ``dtclose`` (``float``): float coded datetime in which the trade was\n    closed\n\n    - Use method ``close_datetime`` to get a Python datetime.datetime\n      or use the platform provided ``num2date`` method\n\n  - ``barlen`` (``int``): number of bars this trade was open\n  - ``historyon`` (``bool``): whether history has to be recorded\n  - ``history`` (``list``): holds a list updated with each \"update\" event\n    containing the resulting status and parameters used in the update\n\n    The first entry in the history is the Opening Event\n    The last entry in the history is the Closing Event",
    "constructor_signature": "(self, data=None, tradeid=0, historyon=False, size=0, price=0.0, value=0.0, commission=0.0)",
    "methods": [
        {
            "name": "close_datetime",
            "signature": "(self, tz=None, naive=True)",
            "doc": "Returns a datetime.datetime object with the datetime in which\nthe trade was closed"
        },
        {
            "name": "getdataname",
            "signature": "(self)",
            "doc": "Shortcut to retrieve the name of the data this trade references"
        },
        {
            "name": "open_datetime",
            "signature": "(self, tz=None, naive=True)",
            "doc": "Returns a datetime.datetime object with the datetime in which\nthe trade was opened"
        },
        {
            "name": "update",
            "signature": "(self, order, size, price, value, commission, pnl, comminfo)",
            "doc": "Updates the current trade. The logic does not check if the\ntrade is reversed, which is not conceptually supported by the\nobject.\n\nIf an update sets the size attribute to 0, \"closed\" will be\nset to true\n\nUpdates may be received twice for each order, once for the existing\nsize which has been closed (sell undoing a buy) and a second time for\nthe the opening part (sell reversing a buy)\n\nArgs:\n    order: the order object which has (completely or partially)\n        generated this update\n    size (int): amount to update the order\n        if size has the same sign as the current trade a\n        position increase will happen\n        if size has the opposite sign as current op size a\n        reduction/close will happen\n\n    price (float): always be positive to ensure consistency\n    value (float): (unused) cost incurred in new size/price op\n                   Not used because the value is calculated for the\n                   trade\n    commission (float): incurred commission in the new size/price op\n    pnl (float): (unused) generated by the executed part\n                 Not used because the trade has an independent pnl"
        }
    ],
    "attributes": {
        "refbasis": {
            "value": "count(1)",
            "doc": "Return a count object whose .__next__() method returns consecutive values.\n\nEquivalent to:\n    def count(firstval=0, step=1):\n        x = firstval\n        while 1:\n            yield x\n            x += step"
        },
        "status_names": {
            "value": "['Created', 'Open', 'Closed']",
            "doc": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        },
        "Created": {
            "value": "0",
            "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4"
        },
        "Open": {
            "value": "1",
            "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4"
        },
        "Closed": {
            "value": "2",
            "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4"
        }
    },
    "input_schema": {
        "data": {
            "default": null,
            "annotation": "Any"
        },
        "tradeid": {
            "default": 0,
            "annotation": "Any"
        },
        "historyon": {
            "default": false,
            "annotation": "Any"
        },
        "size": {
            "default": 0,
            "annotation": "Any"
        },
        "price": {
            "default": 0.0,
            "annotation": "Any"
        },
        "value": {
            "default": 0.0,
            "annotation": "Any"
        },
        "commission": {
            "default": 0.0,
            "annotation": "Any"
        }
    },
    "params_schema": {},
    "output_schema": {}
}