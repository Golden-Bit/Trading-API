{
    "name": "SharpeRatio",
    "module": "backtrader.analyzers.sharpe",
    "doc": "This analyzer calculates the SharpeRatio of a strategy using a risk free\nasset which is simply an interest rate\n\nSee also:\n\n  - https://en.wikipedia.org/wiki/Sharpe_ratio\n\nParams:\n\n  - ``timeframe``: (default: ``TimeFrame.Years``)\n\n  - ``compression`` (default: ``1``)\n\n    Only used for sub-day timeframes to for example work on an hourly\n    timeframe by specifying \"TimeFrame.Minutes\" and 60 as compression\n\n  - ``riskfreerate`` (default: 0.01 -> 1%)\n\n    Expressed in annual terms (see ``convertrate`` below)\n\n  - ``convertrate`` (default: ``True``)\n\n    Convert the ``riskfreerate`` from annual to monthly, weekly or daily\n    rate. Sub-day conversions are not supported\n\n  - ``factor`` (default: ``None``)\n\n    If ``None``, the conversion factor for the riskfree rate from *annual*\n    to the chosen timeframe will be chosen from a predefined table\n\n      Days: 252, Weeks: 52, Months: 12, Years: 1\n\n    Else the specified value will be used\n\n  - ``annualize`` (default: ``False``)\n\n    If ``convertrate`` is ``True``, the *SharpeRatio* will be delivered in\n    the ``timeframe`` of choice.\n\n    In most occasions the SharpeRatio is delivered in annualized form.\n    Convert the ``riskfreerate`` from annual to monthly, weekly or daily\n    rate. Sub-day conversions are not supported\n\n  - ``stddev_sample`` (default: ``False``)\n\n    If this is set to ``True`` the *standard deviation* will be calculated\n    decreasing the denominator in the mean by ``1``. This is used when\n    calculating the *standard deviation* if it's considered that not all\n    samples are used for the calculation. This is known as the *Bessels'\n    correction*\n\n  - ``daysfactor`` (default: ``None``)\n\n    Old naming for ``factor``. If set to anything else than ``None`` and\n    the ``timeframe`` is ``TimeFrame.Days`` it will be assumed this is old\n    code and the value will be used\n\n  - ``legacyannual`` (default: ``False``)\n\n    Use the ``AnnualReturn`` return analyzer, which as the name implies\n    only works on years\n\n  - ``fund`` (default: ``None``)\n\n    If ``None`` the actual mode of the broker (fundmode - True/False) will\n    be autodetected to decide if the returns are based on the total net\n    asset value or on the fund value. See ``set_fundmode`` in the broker\n    documentation\n\n    Set it to ``True`` or ``False`` for a specific behavior\n\nMethods:\n\n  - get_analysis\n\n    Returns a dictionary with key \"sharperatio\" holding the ratio",
    "constructor_signature": "(self)",
    "methods": [
        {
            "name": "_next",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_nextstart",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_notify_cashvalue",
            "signature": "(self, cash, value)",
            "doc": ""
        },
        {
            "name": "_notify_fund",
            "signature": "(self, cash, value, fundvalue, shares)",
            "doc": ""
        },
        {
            "name": "_notify_order",
            "signature": "(self, order)",
            "doc": ""
        },
        {
            "name": "_notify_trade",
            "signature": "(self, trade)",
            "doc": ""
        },
        {
            "name": "_prenext",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_register",
            "signature": "(self, child)",
            "doc": ""
        },
        {
            "name": "_start",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_stop",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "create_analysis",
            "signature": "(self)",
            "doc": "Meant to be overriden by subclasses. Gives a chance to create the\nstructures that hold the analysis.\n\nThe default behaviour is to create a ``OrderedDict`` named ``rets``"
        },
        {
            "name": "get_analysis",
            "signature": "(self)",
            "doc": "Returns a *dict-like* object with the results of the analysis\n\nThe keys and format of analysis results in the dictionary is\nimplementation dependent.\n\nIt is not even enforced that the result is a *dict-like object*, just\nthe convention\n\nThe default implementation returns the default OrderedDict ``rets``\ncreated by the default ``create_analysis`` method"
        },
        {
            "name": "next",
            "signature": "(self)",
            "doc": "Invoked for each next invocation of the strategy, once the minum\npreiod of the strategy has been reached"
        },
        {
            "name": "nextstart",
            "signature": "(self)",
            "doc": "Invoked exactly once for the nextstart invocation of the strategy,\nwhen the minimum period has been first reached"
        },
        {
            "name": "notify_cashvalue",
            "signature": "(self, cash, value)",
            "doc": "Receives the cash/value notification before each next cycle"
        },
        {
            "name": "notify_fund",
            "signature": "(self, cash, value, fundvalue, shares)",
            "doc": "Receives the current cash, value, fundvalue and fund shares"
        },
        {
            "name": "notify_order",
            "signature": "(self, order)",
            "doc": "Receives order notifications before each next cycle"
        },
        {
            "name": "notify_trade",
            "signature": "(self, trade)",
            "doc": "Receives trade notifications before each next cycle"
        },
        {
            "name": "pprint",
            "signature": "(self, *args, **kwargs)",
            "doc": "Prints the results returned by ``get_analysis`` using the pretty\nprint Python module (*pprint*)"
        },
        {
            "name": "prenext",
            "signature": "(self)",
            "doc": "Invoked for each prenext invocation of the strategy, until the minimum\nperiod of the strategy has been reached\n\nThe default behavior for an analyzer is to invoke ``next``"
        },
        {
            "name": "print",
            "signature": "(self, *args, **kwargs)",
            "doc": "Prints the results returned by ``get_analysis`` via a standard\n``Writerfile`` object, which defaults to writing things to standard\noutput"
        },
        {
            "name": "start",
            "signature": "(self)",
            "doc": "Invoked to indicate the start of operations, giving the analyzer\ntime to setup up needed things"
        },
        {
            "name": "stop",
            "signature": "(self)",
            "doc": "Invoked to indicate the end of operations, giving the analyzer\ntime to shut down needed things"
        }
    ],
    "attributes": {
        "RATEFACTORS": {
            "value": "{5: 252, 6: 52, 7: 12, 8: 1}",
            "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
        },
        "packages": {
            "value": "()",
            "doc": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        },
        "frompackages": {
            "value": "()",
            "doc": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
    },
    "input_schema": {},
    "params_schema": {},
    "output_schema": {}
}