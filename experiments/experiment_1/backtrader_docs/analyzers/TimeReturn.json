{
    "name": "TimeReturn",
    "module": "backtrader.analyzers.timereturn",
    "doc": "This analyzer calculates the Returns by looking at the beginning\nand end of the timeframe\n\nParams:\n\n  - ``timeframe`` (default: ``None``)\n    If ``None`` the ``timeframe`` of the 1st data in the system will be\n    used\n\n    Pass ``TimeFrame.NoTimeFrame`` to consider the entire dataset with no\n    time constraints\n\n  - ``compression`` (default: ``None``)\n\n    Only used for sub-day timeframes to for example work on an hourly\n    timeframe by specifying \"TimeFrame.Minutes\" and 60 as compression\n\n    If ``None`` then the compression of the 1st data of the system will be\n    used\n\n  - ``data`` (default: ``None``)\n\n    Reference asset to track instead of the portfolio value.\n\n    .. note:: this data must have been added to a ``cerebro`` instance with\n              ``addata``, ``resampledata`` or ``replaydata``\n\n  - ``firstopen`` (default: ``True``)\n\n    When tracking the returns of a ``data`` the following is done when\n    crossing a timeframe boundary, for example ``Years``:\n\n      - Last ``close`` of previous year is used as the reference price to\n        see the return in the current year\n\n    The problem is the 1st calculation, because the data has** no\n    previous** closing price. As such and when this parameter is ``True``\n    the *opening* price will be used for the 1st calculation.\n\n    This requires the data feed to have an ``open`` price (for ``close``\n    the standard [0] notation will be used without reference to a field\n    price)\n\n    Else the initial close will be used.\n\n  - ``fund`` (default: ``None``)\n\n    If ``None`` the actual mode of the broker (fundmode - True/False) will\n    be autodetected to decide if the returns are based on the total net\n    asset value or on the fund value. See ``set_fundmode`` in the broker\n    documentation\n\n    Set it to ``True`` or ``False`` for a specific behavior\n\nMethods:\n\n  - get_analysis\n\n    Returns a dictionary with returns as values and the datetime points for\n    each return as keys",
    "constructor_signature": "(self, /, *args, **kwargs)",
    "methods": [
        {
            "name": "_dt_over",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_get_dt_cmpkey",
            "signature": "(self, dt)",
            "doc": ""
        },
        {
            "name": "_get_subday_cmpkey",
            "signature": "(self, dt)",
            "doc": ""
        },
        {
            "name": "_next",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_nextstart",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_notify_cashvalue",
            "signature": "(self, cash, value)",
            "doc": ""
        },
        {
            "name": "_notify_fund",
            "signature": "(self, cash, value, fundvalue, shares)",
            "doc": ""
        },
        {
            "name": "_notify_order",
            "signature": "(self, order)",
            "doc": ""
        },
        {
            "name": "_notify_trade",
            "signature": "(self, trade)",
            "doc": ""
        },
        {
            "name": "_prenext",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_register",
            "signature": "(self, child)",
            "doc": ""
        },
        {
            "name": "_start",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_stop",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "create_analysis",
            "signature": "(self)",
            "doc": "Meant to be overriden by subclasses. Gives a chance to create the\nstructures that hold the analysis.\n\nThe default behaviour is to create a ``OrderedDict`` named ``rets``"
        },
        {
            "name": "get_analysis",
            "signature": "(self)",
            "doc": "Returns a *dict-like* object with the results of the analysis\n\nThe keys and format of analysis results in the dictionary is\nimplementation dependent.\n\nIt is not even enforced that the result is a *dict-like object*, just\nthe convention\n\nThe default implementation returns the default OrderedDict ``rets``\ncreated by the default ``create_analysis`` method"
        },
        {
            "name": "next",
            "signature": "(self)",
            "doc": "Invoked for each next invocation of the strategy, once the minum\npreiod of the strategy has been reached"
        },
        {
            "name": "nextstart",
            "signature": "(self)",
            "doc": "Invoked exactly once for the nextstart invocation of the strategy,\nwhen the minimum period has been first reached"
        },
        {
            "name": "notify_cashvalue",
            "signature": "(self, cash, value)",
            "doc": "Receives the cash/value notification before each next cycle"
        },
        {
            "name": "notify_fund",
            "signature": "(self, cash, value, fundvalue, shares)",
            "doc": "Receives the current cash, value, fundvalue and fund shares"
        },
        {
            "name": "notify_order",
            "signature": "(self, order)",
            "doc": "Receives order notifications before each next cycle"
        },
        {
            "name": "notify_trade",
            "signature": "(self, trade)",
            "doc": "Receives trade notifications before each next cycle"
        },
        {
            "name": "on_dt_over",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "pprint",
            "signature": "(self, *args, **kwargs)",
            "doc": "Prints the results returned by ``get_analysis`` using the pretty\nprint Python module (*pprint*)"
        },
        {
            "name": "prenext",
            "signature": "(self)",
            "doc": "Invoked for each prenext invocation of the strategy, until the minimum\nperiod of the strategy has been reached\n\nThe default behavior for an analyzer is to invoke ``next``"
        },
        {
            "name": "print",
            "signature": "(self, *args, **kwargs)",
            "doc": "Prints the results returned by ``get_analysis`` via a standard\n``Writerfile`` object, which defaults to writing things to standard\noutput"
        },
        {
            "name": "start",
            "signature": "(self)",
            "doc": "Invoked to indicate the start of operations, giving the analyzer\ntime to setup up needed things"
        },
        {
            "name": "stop",
            "signature": "(self)",
            "doc": "Invoked to indicate the end of operations, giving the analyzer\ntime to shut down needed things"
        }
    ],
    "attributes": {
        "packages": {
            "value": "()",
            "doc": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        },
        "frompackages": {
            "value": "()",
            "doc": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
    },
    "input_schema": {
        "args": {
            "default": null,
            "annotation": "Any"
        },
        "kwargs": {
            "default": null,
            "annotation": "Any"
        }
    },
    "params_schema": {},
    "output_schema": {}
}