{
    "name": "CommInfoBase",
    "module": "backtrader.comminfo",
    "doc": "Base Class for the Commission Schemes.\n\nParams:\n\n  - ``commission`` (def: ``0.0``): base commission value in percentage or\n    monetary units\n\n  - ``mult`` (def ``1.0``): multiplier applied to the asset for\n    value/profit\n\n  - ``margin`` (def: ``None``): amount of monetary units needed to\n    open/hold an operation. It only applies if the final ``_stocklike``\n    attribute in the class is set to ``False``\n\n  - ``automargin`` (def: ``False``): Used by the method ``get_margin``\n    to automatically calculate the margin/guarantees needed with the\n    following policy\n\n      - Use param ``margin`` if param ``automargin`` evaluates to ``False``\n\n      - Use param ``mult`` * ``price`` if ``automargin < 0``\n\n      - Use param ``automargin`` * ``price`` if ``automargin > 0``\n\n  - ``commtype`` (def: ``None``): Supported values are\n    ``CommInfoBase.COMM_PERC`` (commission to be understood as %) and\n    ``CommInfoBase.COMM_FIXED`` (commission to be understood as monetary\n    units)\n\n    The default value of ``None`` is a supported value to retain\n    compatibility with the legacy ``CommissionInfo`` object. If\n    ``commtype`` is set to None, then the following applies:\n\n      - ``margin`` is ``None``: Internal ``_commtype`` is set to\n        ``COMM_PERC`` and ``_stocklike`` is set to ``True`` (Operating\n        %-wise with Stocks)\n\n      - ``margin`` is not ``None``: ``_commtype`` set to ``COMM_FIXED`` and\n        ``_stocklike`` set to ``False`` (Operating with fixed rount-trip\n        commission with Futures)\n\n    If this param is set to something else than ``None``, then it will be\n    passed to the internal ``_commtype`` attribute and the same will be\n    done with the param ``stocklike`` and the internal attribute\n    ``_stocklike``\n\n  - ``stocklike`` (def: ``False``): Indicates if the instrument is\n    Stock-like or Futures-like (see the ``commtype`` discussion above)\n\n  - ``percabs`` (def: ``False``): when ``commtype`` is set to COMM_PERC,\n    whether the parameter ``commission`` has to be understood as XX% or\n    0.XX\n\n    If this param is ``True``: 0.XX\n    If this param is ``False``: XX%\n\n  - ``interest`` (def: ``0.0``)\n\n    If this is non-zero, this is the yearly interest charged for holding a\n    short selling position. This is mostly meant for stock short-selling\n\n    The formula: ``days * price * abs(size) * (interest / 365)``\n\n    It must be specified in absolute terms: 0.05 -> 5%\n\n    .. note:: the behavior can be changed by overriding the method:\n             ``_get_credit_interest``\n\n  - ``interest_long`` (def: ``False``)\n\n    Some products like ETFs get charged on interest for short and long\n    positions. If ths is ``True`` and ``interest`` is non-zero the interest\n    will be charged on both directions\n\n  - ``leverage`` (def: ``1.0``)\n\n    Amount of leverage for the asset with regards to the needed cash\n\nAttributes:\n\n  - ``_stocklike``: Final value to use for Stock-like/Futures-like behavior\n  - ``_commtype``: Final value to use for PERC vs FIXED commissions\n\n  This two are used internally instead of the declared params to enable the\n  compatibility check described above for the legacy ``CommissionInfo``\n  object",
    "constructor_signature": "(self)",
    "methods": [
        {
            "name": "_get_credit_interest",
            "signature": "(self, data, size, price, days, dt0, dt1)",
            "doc": "This method returns  the cost in terms of credit interest charged by\nthe broker.\n\nIn the case of ``size > 0`` this method will only be called if the\nparameter to the class ``interest_long`` is ``True``\n\nThe formulat for the calculation of the credit interest rate is:\n\n  The formula: ``days * price * abs(size) * (interest / 365)``\n\n\nParams:\n  - ``data``: data feed for which interest is charged\n\n  - ``size``: current position size. > 0 for long positions and < 0 for\n    short positions (this parameter will not be ``0``)\n\n  - ``price``: current position price\n\n  - ``days``: number of days elapsed since last credit calculation\n    (this is (dt0 - dt1).days)\n\n  - ``dt0``: (datetime.datetime) current datetime\n\n  - ``dt1``: (datetime.datetime) datetime of previous calculation\n\n``dt0`` and ``dt1`` are not used in the default implementation and are\nprovided as extra input for overridden methods"
        },
        {
            "name": "_getcommission",
            "signature": "(self, size, price, pseudoexec)",
            "doc": "Calculates the commission of an operation at a given price\n\npseudoexec: if True the operation has not yet been executed"
        },
        {
            "name": "cashadjust",
            "signature": "(self, size, price, newprice)",
            "doc": "Calculates cash adjustment for a given price difference"
        },
        {
            "name": "confirmexec",
            "signature": "(self, size, price)",
            "doc": ""
        },
        {
            "name": "get_credit_interest",
            "signature": "(self, data, pos, dt)",
            "doc": "Calculates the credit due for short selling or product specific"
        },
        {
            "name": "get_leverage",
            "signature": "(self)",
            "doc": "Returns the level of leverage allowed for this comission scheme"
        },
        {
            "name": "get_margin",
            "signature": "(self, price)",
            "doc": "Returns the actual margin/guarantees needed for a single item of the\nasset at the given price. The default implementation has this policy:\n\n  - Use param ``margin`` if param ``automargin`` evaluates to ``False``\n\n  - Use param ``mult`` * ``price`` if ``automargin < 0``\n\n  - Use param ``automargin`` * ``price`` if ``automargin > 0``"
        },
        {
            "name": "getcommission",
            "signature": "(self, size, price)",
            "doc": "Calculates the commission of an operation at a given price\n        "
        },
        {
            "name": "getoperationcost",
            "signature": "(self, size, price)",
            "doc": "Returns the needed amount of cash an operation would cost"
        },
        {
            "name": "getsize",
            "signature": "(self, price, cash)",
            "doc": "Returns the needed size to meet a cash operation at a given price"
        },
        {
            "name": "getvalue",
            "signature": "(self, position, price)",
            "doc": "Returns the value of a position given a price. For future-like\nobjects it is fixed at size * margin"
        },
        {
            "name": "getvaluesize",
            "signature": "(self, size, price)",
            "doc": "Returns the value of size for given a price. For future-like\nobjects it is fixed at size * margin"
        },
        {
            "name": "profitandloss",
            "signature": "(self, size, price, newprice)",
            "doc": "Return actual profit and loss a position has"
        }
    ],
    "attributes": {
        "COMM_PERC": {
            "value": "0",
            "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4"
        },
        "COMM_FIXED": {
            "value": "1",
            "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4"
        },
        "margin": {
            "value": "<property object at 0x000002561751E570>",
            "doc": ""
        },
        "stocklike": {
            "value": "<property object at 0x000002561751E5C0>",
            "doc": ""
        },
        "packages": {
            "value": "()",
            "doc": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        },
        "frompackages": {
            "value": "()",
            "doc": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
    },
    "input_schema": {},
    "params_schema": {},
    "output_schema": {}
}