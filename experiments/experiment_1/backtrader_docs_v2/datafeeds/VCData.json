{
    "name": "VCData",
    "module": "backtrader.feeds.vcdata",
    "doc": "VisualChart Data Feed.\n\nParams:\n\n  - ``qcheck`` (default: ``0.5``)\n    Default timeout for waking up to let a resampler/replayer that the\n    current bar can be check for due delivery\n\n    The value is only used if a resampling/replaying filter has been\n    inserted in the data\n\n  - ``historical`` (default: ``False``)\n    If no ``todate`` parameter is supplied (defined in the base class),\n    this will force a historical only download if set to ``True``\n\n    If ``todate`` is supplied the same effect is achieved\n\n  - ``milliseconds`` (default: ``True``)\n    The bars constructed by *Visual Chart* have this aspect:\n    HH:MM:59.999000\n\n    If this parameter is ``True`` a millisecond will be added to this time\n    to make it look like: HH::MM + 1:00.000000\n\n  - ``tradename`` (default: ``None``)\n    Continous futures cannot be traded but are ideal for data tracking. If\n    this parameter is supplied it will be the name of the current future\n    which will be the trading asset. Example:\n\n    - 001ES -> ES-Mini continuous supplied as ``dataname``\n\n    - ESU16 -> ES-Mini 2016-09. If this is supplied in ``tradename`` it\n      will be the trading asset.\n\n  - ``usetimezones`` (default: ``True``)\n    For most markets the time offset information provided by *Visual Chart*\n    allows for datetime to be converted to market time (*backtrader* choice\n    for representation)\n\n    Some markets are special (``096``) and need special internal coverage\n    and timezone support to display in the user expected market time.\n\n    If this parameter is set to ``True`` importing ``pytz`` will be\n    attempted to use timezones (default)\n\n    Disabling it will remove timezone usage (may help if the load is\n    excesive)",
    "constructor_signature": "(self, **kwargs)",
    "methods": [
        {
            "name": "OnNewDataSerieBar",
            "signature": "(self, DataSerie, forcepush=False)",
            "doc": ""
        },
        {
            "name": "OnNewTicks",
            "signature": "(self, ArrayTicks)",
            "doc": ""
        },
        {
            "name": "_add2stack",
            "signature": "(self, bar, stash=False)",
            "doc": "Saves given bar (list of values) to the stack for later retrieval"
        },
        {
            "name": "_check",
            "signature": "(self, forcedata=None)",
            "doc": ""
        },
        {
            "name": "_fromstack",
            "signature": "(self, forward=False, stash=False)",
            "doc": "Load a value from the stack onto the lines to form the new bar\n\nReturns True if values are present, False otherwise"
        },
        {
            "name": "_getline",
            "signature": "(self, line, minusall=False)",
            "doc": ""
        },
        {
            "name": "_getnexteos",
            "signature": "(self)",
            "doc": "Returns the next eos using a trading calendar if available"
        },
        {
            "name": "_getpingtmout",
            "signature": "(self)",
            "doc": "Returns the actual ping timeout for PumpEvents to wake up and call\nping, which will check if the not yet delivered bar can be\ndelivered. The bar may be stalled because vc awaits a new tick and\nduring low negotiation hour this can take several seconds after the\nactual expected delivery time"
        },
        {
            "name": "_gettz",
            "signature": "(self, tzin=False)",
            "doc": "Returns the default output timezone for the data\n\nThis defaults to be the timezone in which the market is traded"
        },
        {
            "name": "_gettzinput",
            "signature": "(self)",
            "doc": "Returns the timezone to consider for the input data"
        },
        {
            "name": "_last",
            "signature": "(self, datamaster=None)",
            "doc": ""
        },
        {
            "name": "_load",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_makeoperation",
            "signature": "(self, other, operation, r=False, _ownerskip=None)",
            "doc": ""
        },
        {
            "name": "_makeoperationown",
            "signature": "(self, operation, _ownerskip=None)",
            "doc": ""
        },
        {
            "name": "_operation",
            "signature": "(self, other, operation, r=False, intify=False)",
            "doc": ""
        },
        {
            "name": "_operation_stage1",
            "signature": "(self, other, operation, r=False, intify=False)",
            "doc": "Two operands' operation. Scanning of other happens to understand\nif other must be directly an operand or rather a subitem thereof"
        },
        {
            "name": "_operation_stage2",
            "signature": "(self, other, operation, r=False)",
            "doc": "Rich Comparison operators. Scans other and returns either an\noperation with other directly or a subitem from other"
        },
        {
            "name": "_operationown",
            "signature": "(self, operation)",
            "doc": ""
        },
        {
            "name": "_operationown_stage1",
            "signature": "(self, operation)",
            "doc": "Operation with single operand which is \"self\""
        },
        {
            "name": "_operationown_stage2",
            "signature": "(self, operation)",
            "doc": ""
        },
        {
            "name": "_plotlabel",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_roperation",
            "signature": "(self, other, operation, intify=False)",
            "doc": "Relies on self._operation to and passes \"r\" True to define a\nreverse operation"
        },
        {
            "name": "_save2stack",
            "signature": "(self, erase=False, force=False, stash=False)",
            "doc": "Saves current bar to the bar stack for later retrieval\n\nParameter ``erase`` determines removal from the data stream"
        },
        {
            "name": "_setserie",
            "signature": "(self, serie)",
            "doc": ""
        },
        {
            "name": "_stage1",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_stage2",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_start",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_start_finish",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_tick_fill",
            "signature": "(self, force=False)",
            "doc": ""
        },
        {
            "name": "_tick_nullify",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "_timeoffset",
            "signature": "(self)",
            "doc": "Returns the calculated time offset local equipment -> data server"
        },
        {
            "name": "_updatebar",
            "signature": "(self, bar, forward=False, ago=0)",
            "doc": "Load a value from the stack onto the lines to form the new bar\n\nReturns True if values are present, False otherwise"
        },
        {
            "name": "addfilter",
            "signature": "(self, p, *args, **kwargs)",
            "doc": ""
        },
        {
            "name": "addfilter_simple",
            "signature": "(self, f, *args, **kwargs)",
            "doc": ""
        },
        {
            "name": "addminperiod",
            "signature": "(self, minperiod)",
            "doc": "The passed minperiod is fed to the lines"
        },
        {
            "name": "advance",
            "signature": "(self, size=1, datamaster=None, ticks=True)",
            "doc": ""
        },
        {
            "name": "advance_peek",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "backwards",
            "signature": "(self, size=1, force=False)",
            "doc": ""
        },
        {
            "name": "clone",
            "signature": "(self, **kwargs)",
            "doc": ""
        },
        {
            "name": "compensate",
            "signature": "(self, other)",
            "doc": "Call it to let the broker know that actions on this asset will\ncompensate open positions in another"
        },
        {
            "name": "copyas",
            "signature": "(self, _dataname, **kwargs)",
            "doc": ""
        },
        {
            "name": "date2num",
            "signature": "(self, dt)",
            "doc": ""
        },
        {
            "name": "debug_ticks",
            "signature": "(self, ticks)",
            "doc": ""
        },
        {
            "name": "do_qcheck",
            "signature": "(self, onoff, qlapse)",
            "doc": ""
        },
        {
            "name": "extend",
            "signature": "(self, value=nan, size=0)",
            "doc": ""
        },
        {
            "name": "forward",
            "signature": "(self, value=nan, size=1)",
            "doc": ""
        },
        {
            "name": "get_notifications",
            "signature": "(self)",
            "doc": "Return the pending \"store\" notifications"
        },
        {
            "name": "getenvironment",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "getfeed",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "getwriterheaders",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "getwriterinfo",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "getwritervalues",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "haslivedata",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "home",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "incminperiod",
            "signature": "(self, minperiod)",
            "doc": "The passed minperiod is fed to the lines"
        },
        {
            "name": "islive",
            "signature": "(self)",
            "doc": "Returns ``True`` to notify ``Cerebro`` that preloading and runonce\nshould be deactivated"
        },
        {
            "name": "load",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "minbuffer",
            "signature": "(self, size)",
            "doc": "Receive notification of how large the buffer must at least be"
        },
        {
            "name": "next",
            "signature": "(self, datamaster=None, ticks=True)",
            "doc": "Called to calculate values when the minperiod is over"
        },
        {
            "name": "nextstart",
            "signature": "(self)",
            "doc": "It will be called when the minperiod phase is over for the 1st\npost-minperiod value. Only called once and defaults to automatically\ncalling next"
        },
        {
            "name": "num2date",
            "signature": "(self, dt=None, tz=None, naive=True)",
            "doc": ""
        },
        {
            "name": "once",
            "signature": "(self, start, end)",
            "doc": "Called to calculate values at \"once\" when the minperiod is over"
        },
        {
            "name": "oncestart",
            "signature": "(self, start, end)",
            "doc": "It will be called when the minperiod phase is over for the 1st\npost-minperiod value\n\nOnly called once and defaults to automatically calling once"
        },
        {
            "name": "ping",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "plotlabel",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "preload",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "prenext",
            "signature": "(self)",
            "doc": "It will be called during the \"minperiod\" phase of an iteration."
        },
        {
            "name": "preonce",
            "signature": "(self, start, end)",
            "doc": "It will be called during the \"minperiod\" phase of a \"once\" iteration"
        },
        {
            "name": "put_notification",
            "signature": "(self, status, *args, **kwargs)",
            "doc": "Add arguments to notification queue"
        },
        {
            "name": "qbuffer",
            "signature": "(self, savemem=0, replaying=False)",
            "doc": "Change the lines to implement a minimum size qbuffer scheme"
        },
        {
            "name": "replay",
            "signature": "(self, **kwargs)",
            "doc": ""
        },
        {
            "name": "resample",
            "signature": "(self, **kwargs)",
            "doc": ""
        },
        {
            "name": "reset",
            "signature": "(self)",
            "doc": ""
        },
        {
            "name": "rewind",
            "signature": "(self, size=1)",
            "doc": ""
        },
        {
            "name": "setenvironment",
            "signature": "(self, env)",
            "doc": "Receives an environment (cerebro) and passes it over to the store it\nbelongs to"
        },
        {
            "name": "setminperiod",
            "signature": "(self, minperiod)",
            "doc": "Direct minperiod manipulation. It could be used for example\nby a strategy\nto not wait for all indicators to produce a value"
        },
        {
            "name": "start",
            "signature": "(self)",
            "doc": "Starts the VC connecction and gets the real contract and\ncontractdetails if it exists"
        },
        {
            "name": "stop",
            "signature": "(self)",
            "doc": "Stops and tells the store to stop"
        },
        {
            "name": "updateminperiod",
            "signature": "(self, minperiod)",
            "doc": "Update the minperiod if needed. The minperiod will have been\ncalculated elsewhere\nand has to take over if greater that self's"
        }
    ],
    "attributes": {
        "_TOFFSET": {
            "value": "datetime.timedelta(0)",
            "doc": "Difference between two datetime values.\n\ntimedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)\n\nAll arguments are optional and default to 0.\nArguments may be integers or floats, and may be positive or negative."
        },
        "_ST_START": {
            "value": "0",
            "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4"
        },
        "_ST_FEEDING": {
            "value": "1",
            "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4"
        },
        "_ST_NOTFOUND": {
            "value": "2",
            "doc": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4"
        },
        "NULLDATE": {
            "value": "datetime.datetime(1899, 12, 30, 0, 0)",
            "doc": "datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\nThe year, month and day arguments are required. tzinfo may be None, or an\ninstance of a tzinfo subclass. The remaining arguments may be ints."
        },
        "MILLISECOND": {
            "value": "datetime.timedelta(microseconds=1000)",
            "doc": "Difference between two datetime values.\n\ntimedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)\n\nAll arguments are optional and default to 0.\nArguments may be integers or floats, and may be positive or negative."
        },
        "PING_TIMEOUT": {
            "value": "25.0",
            "doc": "Convert a string or number to a floating point number, if possible."
        },
        "_TZS": {
            "value": "{'Europe/London': ('011', '024', '027', '036', '049', '092', '114', '033', '034', '035', '043', '054', '096', '300'), 'Europe/Berlin': ('005', '006', '008', '012', '013', '014', '015', '017', '019', '025', '029', '030', '037', '038', '052', '053', '060', '061', '072', '073', '074', '075', '080', '093', '094', '097', '111', '112', '113'), 'Asia/Tokyo': ('031',), 'Australia/Melbourne': ('032',), 'America/Argentina/Buenos_Aires': ('044',), 'America/Sao_Paulo': ('045',), 'America/Mexico_City': ('046',), 'America/Santiago': ('047',), 'US/Eastern': ('003', '004', '009', '010', '028', '040', '041', '055', '090', '095', '099'), 'US/Central': ('001', '002', '020', '021', '022', '023', '056')}",
            "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
        },
        "_TZOUT": {
            "value": "{'096.FTSE': 'Europe/London', '096.FTEU3': 'Europe/London', '096.MIB30': 'Europe/Berlin', '096.SSMI': 'Europe/Berlin', '096.HSI': 'Asia/Hong_Kong', '096.BVSP': 'America/Sao_Paulo', '096.MERVAL': 'America/Argentina/Buenos_Aires', '096.DJI': 'US/Eastern', '096.IXIC': 'US/Eastern', '096.NDX': 'US/Eastern'}",
            "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
        },
        "_EXTRA_TIMEOFFSET": {
            "value": "('096',)",
            "doc": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        },
        "_TIMEFRAME_BACKFILL": {
            "value": "{1: datetime.timedelta(days=1), 2: datetime.timedelta(days=1), 3: datetime.timedelta(days=1), 4: datetime.timedelta(days=2), 5: datetime.timedelta(days=365), 6: datetime.timedelta(days=730), 7: datetime.timedelta(days=1825), 8: datetime.timedelta(days=7300)}",
            "doc": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
        },
        "alias": {
            "value": "()",
            "doc": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        },
        "aliased": {
            "value": "''",
            "doc": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        },
        "packages": {
            "value": "()",
            "doc": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        },
        "frompackages": {
            "value": "()",
            "doc": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
    },
    "input_schema": {
        "kwargs": {
            "default": null,
            "annotation": "Any"
        }
    },
    "params_schema": {},
    "output_schema": {
        "lines": {
            "model": "<class 'backtrader.lineseries.Lines_LineSeries_DataSeries_OHLC_OHLCDateTime_AbstractDataBase_DataBase_VCData'>",
            "doc": "Defines an \"array\" of lines which also has most of the interface of\na LineBuffer class (forward, rewind, advance...).\n\nThis interface operations are passed to the lines held by self\n\nThe class can autosubclass itself (_derive) to hold new lines keeping them\nin the defined order."
        }
    }
}